===============================
CREATE TABLE Book(
bookid 		INTEGER PRIMARY KEY,
bookname 	VARCHAR(40),
publisher	 	VARCHAR(40),
price 		INTEGER
);

CREATE TABLE Customer(
custid 		INTEGER PRIMARY KEY,
name 	VARCHAR(40),
address	 	VARCHAR(50),
phone 		VARCHAR(20)
);

CREATE TABLE Orders(
orderid 		INTEGER PRIMARY KEY,
custid 		INTEGER,
bookid	 	INTEGER,
saleprice 		INTEGER,
orderdate 	DATE,
FOREIGN KEY (custid) REFERENCES Customer(custid),
FOREIGN KEY (bookid) REFERENCES Book(bookid)
);
========================================
06.04
INSERT INTO Book VALUES(1, '축구의 역사', '굿스포츠', 7000);
INSERT INTO Book VALUES(2, '축구아는 여자', '나무수', 13000);
INSERT INTO Book VALUES(3, '축구의 이해', '대한미디어', 22000);
INSERT INTO Book VALUES(4, '골프 바이블', '대한미디어', 35000);
INSERT INTO Book VALUES(5, '피겨 교본', '굿스포츠', 8000);
INSERT INTO Book VALUES(6, '역도 단계별기술', '굿스포츠', 6000);
INSERT INTO Book VALUES(7, '야구의 추억', '이상미디어', 20000);
INSERT INTO Book VALUES(8, '야구를 부탁해', '이상미디어', 13000);
INSERT INTO Book VALUES(9, '올림픽 이야기', '삼성당', 7500);
INSERT INTO Book VALUES(10, 'Olympic Champions', 'Pearson', 13000);

INSERT INTO Customer VALUES (1, '박지성', '영국 맨체스타', '000-5000-0001');
INSERT INTO Customer VALUES (2, '김연아', '대한민국 서울', '000-6000-0001');  
INSERT INTO Customer VALUES (3, '장미란', '대한민국 강원도', '000-7000-0001');
INSERT INTO Customer VALUES (4, '추신수', '미국 클리블랜드', '000-8000-0001');
INSERT INTO Customer VALUES (5, '박세리', '대한민국 대전',  NULL);

INSERT INTO Orders VALUES (1, 1, 1, 6000, STR_TO_DATE('2014-07-01','%Y-%m-%d')); 
INSERT INTO Orders VALUES (2, 1, 3, 21000, STR_TO_DATE('2014-07-03','%Y-%m-%d'));
INSERT INTO Orders VALUES (3, 2, 5, 8000, STR_TO_DATE('2014-07-03','%Y-%m-%d')); 
INSERT INTO Orders VALUES (4, 3, 6, 6000, STR_TO_DATE('2014-07-04','%Y-%m-%d')); 
INSERT INTO Orders VALUES (5, 4, 7, 20000, STR_TO_DATE('2014-07-05','%Y-%m-%d'));
INSERT INTO Orders VALUES (6, 1, 2, 12000, STR_TO_DATE('2014-07-07','%Y-%m-%d'));
INSERT INTO Orders VALUES (7, 4, 8, 13000, STR_TO_DATE( '2014-07-07','%Y-%m-%d'));
INSERT INTO Orders VALUES (8, 3, 10, 12000, STR_TO_DATE('2014-07-08','%Y-%m-%d')); 
INSERT INTO Orders VALUES (9, 2, 10, 7000, STR_TO_DATE('2014-07-09','%Y-%m-%d')); 
INSERT INTO Orders VALUES (10, 3, 8, 13000, STR_TO_DATE('2014-07-10','%Y-%m-%d'));

-- 여기는 3장에서 사용되는 Imported_book 테이블
CREATE TABLE Imported_Book (
  bookid      INTEGER,
  bookname    VARCHAR(40),
  publisher   VARCHAR(40),
  price       INTEGER 
);

INSERT INTO Imported_Book VALUES(21, 'Zen Golf', 'Pearson', 12000);
INSERT INTO Imported_Book VALUES(22, 'Soccer Skills', 'Human Kinetics', 15000);
commit;

book 이라는 관계(표)에서 가격이 10000원 이하인 도서목록을 검색해보자
select bookname from book where price <= 10000;
book 이라는 관계(표)에서 가격이 7000원 초과 10000원 이하인 도서목록을 검색해보자
select bookname from book where price > 7000 and price <= 10000;

축구의 역사 1
축구의 역사 2
축구의 역사 3
[]%

마당서점 테이블 연습문제
3. 박지성의 총 구매액
select sum(saleprice) AS '총 구매액'
    -> from Customer, Orders
    -> Where Customer.custid = 0rders.custid AND Customer.name = '박지성';

4. 박지성이 구매한 출판사 수
select count(distinct publisher) as '출판사 수'
 -> from customer, orders, book
 -> where customer.custid=orders.custid and orders.bookid=book.bookid
 -> and customer.name = '박지성';

5. 박지성이 구매한 도서의 이름, 가격, 정가와 판매가격의 차이
select bookname, price, price-saleprice
 -> from customer, orders, book
 -> where customer.custid=orders.custid and orders.bookid=book.bookid
 -> and customer.name = '박지성';

6. 박지성이 구매하지 않은 도서의 이름
select bookname from book
 -> where not exists
 -> (select bookname from customer, orders)

=====================================
06. 07
2번문제
1 - 마당서점 도서의 총 개수
 SELECT COUNT(*)
    -> FROM Book;

2 - 마당서점에 도서를 출고하는 출판사의 총 개수
 SELECT COUNT(publisher)
    -> FROM book;

3 - 모든 고객의 이름, 주소
 SELECT name, address
    -> FROM Customer;

4 - 14.07.04~07.07 사이에 주문받은 도서의 주문번호
SELECT bookid
    -> FROM Orders
    -> WHERE orderdate between date('2014-07-04') and date('2014-07-07')+1;

5 - 14.07.04~07.07 사이에 주문받은 도서를 제외한 도서의 주문번호
 SELECT bookid
    -> FROM Orders
    -> WHERE orderdate <> date('2014-07-04') and date('2014-07-07')+1;

6 - 성이 '김'씨인 고객의 이름과 주소
SELECT Customer.name, Customer.address
    -> FROM Customer
    -> WHERE Customer.name LIKE '김__%';

7 - 성이 '김'씨이고 이름이 '아'로 끝나는 고객의 이름 주소
SELECT Customer.name, Customer.address
    -> FROM Customer
    -> WHERE Customer.name LIKE '김_아%';

8 - 주문하지 않은 고객의 이름(부속질의 사용)
SELECT name, address
    -> FROM Customer cs
    -> WHERE NOT EXISTS (SELECT *
    -> FROM Orders od
    -> WHERE cs.custid=od.custid);

9 - 주문 금액의 총액과 주문의 평균 금액
 SELECT SUM(saleprice), AVG(saleprice)
    -> FROM Orders;

10 - 고객의 이름과 고객별 구매액
 SELECT CUstomer.name, SUM(saleprice)
    -> FROM Orders, Customer
    -> GROUP BY Customer.name;

11 - 고객의 이름과 고객이 구매한 도서 목록
 SELECT CUstomer.name, Book.bookname
    -> FROM Customer, Orders, Book
    -> WHERE Customer.custid=Orders.custid
    -> GROUP BY Customer.name;

12 - 도서의 가격(Book 테이블)과 판매가격(Orders 테이블)의 차이가 가장 많은 주문

13 - 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
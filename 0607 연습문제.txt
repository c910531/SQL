06. 07
2번문제
1 - 마당서점 도서의 총 개수
 SELECT COUNT(*)
    -> FROM Book;

2 - 마당서점에 도서를 출고하는 출판사의 총 개수
 SELECT COUNT(publisher)
    -> FROM book;

#정답

SELECT COUNT(DISTINCT publisher) FROM book;


3 - 모든 고객의 이름, 주소
 SELECT name, address
    -> FROM Customer;

4 - 14.07.04~07.07 사이에 주문받은 도서의 주문번호
SELECT bookid
    -> FROM Orders
    -> WHERE orderdate between date('2014-07-04') and date('2014-07-07')+1;

# 정답
SELECT Orderid FROM Orders
    -> WHERE orderdate BETWEEN '20140704' AND '20140707';

5 - 14.07.04~07.07 사이에 주문받은 도서를 제외한 도서의 주문번호
 SELECT bookid
    -> FROM Orders
    -> WHERE orderdate <> date('2014-07-04') and date('2014-07-07')+1;

# 정답
SELECT Orderid FROM Orders
    -> WHERE orderdate NOT BETWEEN '20140704' AND '20140707';

6 - 성이 '김'씨인 고객의 이름과 주소
SELECT Customer.name, Customer.address
    -> FROM Customer
    -> WHERE Customer.name LIKE '김__%';

# 정답
LIKE '김%'
SELECT name, address FROM customer WHERE name LIKE '김%';

7 - 성이 '김'씨이고 이름이 '아'로 끝나는 고객의 이름 주소
SELECT Customer.name, Customer.address
    -> FROM Customer
    -> WHERE Customer.name LIKE '김_아%';

# 정답
LIKE '김%아'
SELECT name, address FROM customer WHERE name LIKE '김%아';

8 - 주문하지 않은 고객의 이름(부속질의 사용)
SELECT name, address
    -> FROM Customer cs
    -> WHERE NOT EXISTS (SELECT *
    -> FROM Orders od
    -> WHERE cs.custid=od.custid);
# 정답
SELECT name FROM customer WHERE ? NOT IN ( SELECT name
FROM customer, orders
WHERE customer.custid = orders.custid);

9 - 주문 금액의 총액과 주문의 평균 금액
 SELECT SUM(saleprice), AVG(saleprice)
    -> FROM Orders;
# 정답
SELECT ? SUM(saleprice), AVG(saleprice) FROM orders;

10 - 고객의 이름과 고객별 구매액
 SELECT CUstomer.name, SUM(saleprice)
    -> FROM Orders, Customer
    -> GROUP BY Customer.name;

#정답
SELECT name, SUM(saleprice) FROM orders, customer
WHERE customer.custid = orders.custid
GROUP BY name;

11 - 고객의 이름과 고객이 구매한 도서 목록
 SELECT CUstomer.name, Book.bookname
    -> FROM Customer, Orders, Book
    -> WHERE Customer.custid=Orders.custid
    -> GROUP BY Customer.name;

#정답
SELECT name, bookname FROM customer, book, orders
WHERE customer.custid = orders.custid
AND orders.bookid = book.bookid

12 - 도서의 가격(Book 테이블)과 판매가격(Orders 테이블)의 차이가 가장 많은 주문
SELECT * FROM book, orders WHERE book.bookid = orders.bookid
AND price - saleprice = (SELECT MAX(price-saleprice)
FROM book, orders
WHERE book.bookid = orders.bookid);

13 - 도서의 판매액 평균보다 자신의 구매액 평균이 더 높은 고객의 이름
SELECT name, AVG(saleprice) FROM customer, orders
WHERE customer.custid = orders.custid
GROUP BY name
HAVING AVG(saleprice) > (SELECT AVG(saleprice) FROM Orders);